
==================== Tidy Core ====================

Result size of Tidy Core
  = {terms: 429, types: 807, coercions: 9, joins: 2/11}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 6, types: 10, coercions: 0, joins: 0/0}
lvl3_rhmm
  = \ @s_igFo ds2_igGF ds3_igGG -> $WManyFirst ds2_igGF ds3_igGG

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4_rhmn = I# 0#

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
lvl5_rhmo = \ ds3_igUC ds4_igUD -> $WManyLoop ds3_igUC ds4_igUD

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
lvl6_rhmp = \ ds2_igGY ds3_igGZ -> $WManyFirst ds2_igGY ds3_igGZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_rhmq = "/dev/null"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_rhmr = unpackCString# lvl7_rhmq

-- RHS size: {terms: 380, types: 710, coercions: 0, joins: 2/11}
main1
  = \ s_a3Ev ->
      case openFile1 lvl8_rhmr WriteMode s_a3Ev of
      { (# ipv_a3Ex, ipv1_a3Ey #) ->
      case newAlignedPinnedByteArray# 32752# 1# ipv_a3Ex of
      { (# ipv2_igWc, ipv3_igWd #) ->
      letrec {
        $shandleSplitStep_shl3
          = \ sc_shkL sc1_shkM sc2_shkN _ eta_X2 ->
              case minusAddr# sc2_shkN sc_shkL of wild4_igGz {
                __DEFAULT ->
                  case keepAlive#
                         sc1_shkM
                         eta_X2
                         (\ s2_igGA ->
                            case $whPutBuf' ipv1_a3Ey (Ptr sc_shkL) wild4_igGz True s2_igGA of
                            { (# ipv4_igGC, ipv5_igGD #) ->
                            (# ipv4_igGC, () #)
                            })
                  of
                  { (# ipv4_X1H, ipv5_X1I #) ->
                  case newAlignedPinnedByteArray# 32752# 1# ipv4_X1H of
                  { (# ipv6_X1K, ipv7_X1L #) ->
                  let { ipv8_igWb = mutableByteArrayContents# ipv7_X1L } in
                  handleSplitStep_sheR
                    lvl3_rhmm
                    ()
                    (Partial
                       (Tuple'
                          lvl4_rhmn (ArrayUnsafe ipv8_igWb (PlainPtr ipv7_X1L) ipv8_igWb)))
                    ipv6_X1K
                  }
                  };
                0# ->
                  case newAlignedPinnedByteArray# 32752# 1# eta_X2 of
                  { (# ipv4_X4, ipv5_X5 #) ->
                  let { ipv6_igWb = mutableByteArrayContents# ipv5_X5 } in
                  handleSplitStep_sheR
                    lvl3_rhmm
                    ()
                    (Partial
                       (Tuple'
                          lvl4_rhmn (ArrayUnsafe ipv6_igWb (PlainPtr ipv5_X5) ipv6_igWb)))
                    ipv4_X4
                  }
              };
        handleSplitStep_sheR
          = \ branch_igGg cs_igGh sres_igGi eta_X2 ->
              case sres_igGi of {
                Partial ss1_igGk ->
                  (# eta_X2,
                     case branch_igGg ss1_igGk cs_igGh of dt_X0 { __DEFAULT ->
                     Partial dt_X0
                     } #);
                Done sb_igGm ->
                  case sb_igGm of { Array dt_shjj dt1_shjk dt2_shjl ->
                  case minusAddr# dt2_shjl dt_shjj of wild4_igGz {
                    __DEFAULT ->
                      case keepAlive#
                             dt1_shjk
                             eta_X2
                             (\ s2_igGA ->
                                case $whPutBuf' ipv1_a3Ey (Ptr dt_shjj) wild4_igGz True s2_igGA of
                                { (# ipv4_igGC, ipv5_igGD #) ->
                                (# ipv4_igGC, () #)
                                })
                      of
                      { (# ipv4_X1H, ipv5_X1I #) ->
                      case newAlignedPinnedByteArray# 32752# 1# ipv4_X1H of
                      { (# ipv6_X1K, ipv7_X1L #) ->
                      let { ipv8_igWb = mutableByteArrayContents# ipv7_X1L } in
                      handleSplitStep_sheR
                        lvl3_rhmm
                        ()
                        (Partial
                           (Tuple'
                              lvl4_rhmn (ArrayUnsafe ipv8_igWb (PlainPtr ipv7_X1L) ipv8_igWb)))
                        ipv6_X1K
                      }
                      };
                    0# ->
                      case newAlignedPinnedByteArray# 32752# 1# eta_X2 of
                      { (# ipv4_X4, ipv5_X5 #) ->
                      let { ipv6_igWb = mutableByteArrayContents# ipv5_X5 } in
                      handleSplitStep_sheR
                        lvl3_rhmm
                        ()
                        (Partial
                           (Tuple'
                              lvl4_rhmn (ArrayUnsafe ipv6_igWb (PlainPtr ipv5_X5) ipv6_igWb)))
                        ipv4_X4
                      }
                  }
                  }
              }; } in
      let { ipv4_igWb = mutableByteArrayContents# ipv3_igWd } in
      join {
        exit_X1M w_shj5 ipv5_X1K
          = case w_shj5 of {
              ManyFirst ds3_igH2 cs_igH3 -> (# ipv5_X1K, () #);
              ManyLoop ss_igH5 cs_igH6 ->
                case ss_igH5 of { Tuple' ds2_shjs r_shjt ->
                case r_shjt of { ArrayUnsafe dt_shjw dt1_shjx dt2_shjy ->
                case minusAddr# dt2_shjy dt_shjw of wild1_igXC {
                  __DEFAULT ->
                    case keepAlive#
                           dt1_shjx
                           ipv5_X1K
                           (\ s1_igXD ->
                              case $whPutBuf' ipv1_a3Ey (Ptr dt_shjw) wild1_igXC True s1_igXD of
                              { (# ipv6_igXF, ipv7_igXG #) ->
                              (# ipv6_igXF, () #)
                              })
                    of
                    { (# ipv6_X1Q, ipv7_X1R #) ->
                    (# ipv6_X1Q, () #)
                    };
                  0# -> (# ipv5_X1K, () #)
                }
                }
                }
            } } in
      joinrec {
        $s$wgo_shkl sc_shkk sc1_shkj sc2_shki
          = case <=# sc1_shkj 0# of {
              __DEFAULT ->
                case sc2_shki of {
                  ManyFirst ss_igUy cs_igUz ->
                    case ss_igUy of { Tuple' i_shjB r_shjC ->
                    case i_shjB of { I# x_shjF ->
                    case r_shjC of { ArrayUnsafe dt_shjI dt1_shjJ dt2_shjK ->
                    case writeWord8OffAddr# dt2_shjK 0# 123##8 sc_shkk of s2_a4uZ
                    { __DEFAULT ->
                    let { i1_shgO = +# x_shjF 1# } in
                    case <# i1_shgO 32752# of {
                      __DEFAULT ->
                        case $shandleSplitStep_shl3
                               dt_shjI dt1_shjJ (plusAddr# dt2_shjK 1#) cs_igUz s2_a4uZ
                        of
                        { (# ipv5_X1Q, ipv6_X1R #) ->
                        case ipv6_X1R of {
                          Partial fs3_ifZQ ->
                            jump $s$wgo_shkl ipv5_X1Q (-# sc1_shkj 1#) fs3_ifZQ;
                          Done b1_ifZS -> (# ipv5_X1Q, () #)
                        }
                        };
                      1# ->
                        jump $s$wgo_shkl
                          s2_a4uZ
                          (-# sc1_shkj 1#)
                          (ManyLoop
                             (Tuple'
                                (I# i1_shgO)
                                (ArrayUnsafe dt_shjI dt1_shjJ (plusAddr# dt2_shjK 1#)))
                             ())
                    }
                    }
                    }
                    }
                    };
                  ManyLoop ss_igUE cs_igUF ->
                    case ss_igUE of { Tuple' i_shjO r_shjP ->
                    case i_shjO of { I# x_shjS ->
                    case r_shjP of { ArrayUnsafe dt_shjV dt1_shjW dt2_shjX ->
                    case writeWord8OffAddr# dt2_shjX 0# 123##8 sc_shkk of s2_a4uZ
                    { __DEFAULT ->
                    let { i1_shgO = +# x_shjS 1# } in
                    case <# i1_shgO 32752# of {
                      __DEFAULT ->
                        case $shandleSplitStep_shl3
                               dt_shjV dt1_shjW (plusAddr# dt2_shjX 1#) cs_igUF s2_a4uZ
                        of
                        { (# ipv5_X1Q, ipv6_X1R #) ->
                        case ipv6_X1R of {
                          Partial fs3_ifZQ ->
                            jump $s$wgo_shkl ipv5_X1Q (-# sc1_shkj 1#) fs3_ifZQ;
                          Done b1_ifZS -> (# ipv5_X1Q, () #)
                        }
                        };
                      1# ->
                        jump $s$wgo_shkl
                          s2_a4uZ
                          (-# sc1_shkj 1#)
                          (ManyLoop
                             (Tuple'
                                (I# i1_shgO)
                                (ArrayUnsafe dt_shjV dt1_shjW (plusAddr# dt2_shjX 1#)))
                             ())
                    }
                    }
                    }
                    }
                    }
                };
              1# -> jump exit_X1M sc2_shki sc_shkk
            }; } in
      jump $s$wgo_shkl
        ipv2_igWc
        10000000#
        (ManyFirst
           (Tuple'
              lvl4_rhmn (ArrayUnsafe ipv4_igWb (PlainPtr ipv3_igWd) ipv4_igWb))
           ())
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main = main1 `cast` <Co:3>

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main2 = runMainIO1 (main1 `cast` <Co:3>)

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main = main2 `cast` <Co:3>


------ Local rules for imported ids --------
"SPEC/Main fromStreamK @IO _" [0]
    forall @a_X1G $dMonad_sheX.
      fromStreamK $dMonad_sheX
      = \ eta_ig2g ->
          UnStream
            (\ gst_ig2h m1_ig2i ->
               (m1_ig2i `cast` <Co:3>)
                 gst_ig2h
                 ((\ a1_X1H x_X1I s_a3EC -> (# s_a3EC, Yield a1_X1H x_X1I #))
                  `cast` <Co:15>)
                 ((\ a1_X1H s_a3EC ->
                     (# s_a3EC,
                        Yield
                          a1_X1H ((\ @r_ig2m _ _ _ stp_ig2q -> stp_ig2q) `cast` <Co:4>) #))
                  `cast` <Co:10>)
                 ((\ s_a3EC -> (# s_a3EC, Stop #)) `cast` <Co:7>))
            eta_ig2g
"SPEC/Main replicate @Stream @IO _" [1]
    forall @a_igHt $dIsStream_shf7 $dMonad_shf8.
      replicate $dIsStream_shf7 $dMonad_shf8
      = (\ n_igHw eta_igHx @r_idui eta1_B0 eta2_B1 eta3_B2 eta4_B3 ->
           let {
             step1_igHz
               = \ @p1_igHB _ eta6_igHD ->
                   case eta6_igHD of { I# x1_igHF ->
                   case <=# x1_igHF 0# of {
                     __DEFAULT ->
                       (\ s_a3Ev -> (# s_a3Ev, Yield eta_igHx (I# (-# x1_igHF 1#)) #))
                       `cast` <Co:5>;
                     1# -> (\ s_X1G -> (# s_X1G, Stop #)) `cast` <Co:5>
                   }
                   } } in
           ((toStreamK $fMonadIO (UnStream step1_igHz n_igHw)) `cast` <Co:3>)
             eta1_B0 eta2_B1 eta3_B2 eta4_B3)
        `cast` <Co:10>

